第一部分 : 实验一 python之旅 |实验二 变量和数据类型 |实验三 运算符和表达式 |练习题 计算圆的面积

# 实验一
脚本文件
vim helloworld.py
#!/usr/bin/env python3	//告诉终端，使用 Python 解释器执行其下面的代码。
print("Hello world!")
:wq
chmod +x helloworld.py	//添加可执行权限
./helloworld.py

代码风格建议
    使用 4 个空格来缩进
		永远不要混用空格和制表符
		在函数之间空一行
		在类之间空两行
		字典，列表，元组以及参数列表中，在 , 后添加一个空格。对于字典，: 后面也添加一个空格
		在赋值运算符和比较运算符周围要有空格（参数列表中除外），但是括号里则不加空格：a = f(1, 2) + g(3, 4)
		
#实验二
写一个程序，它将会从键盘读取一个数字并且检查这个数字是否小于 100。
#!/usr/bin/env python3
number = int(input("Enter an integer: "))
if number <= 100:
    print("Your number is less than or equal to 100")
else:
    print("Your number is greater than 100")

计算投资
#!/usr/bin/env python3
amount = float(input("Enter amount: "))  # 输入数额
inrate = float(input("Enter Interest rate: "))  # 输入利率
period = int(input("Enter period: "))  # 输入期限
value = 0
year = 1
while year <= period:
    value = amount + (inrate * amount)
    print("Year {} Rs. {:.2f}".format(year, value))	
			#Year {} Rs. {:.2f}".format(year, value) 称为字符串格式化。大括号和其中的字符会被替换成传入 str.format() 的参数，
			#也即 year 和 value。其中 {:.2f} 的意思是替换为 2 位精度的浮点数。
    amount = value
    year = year + 1

求 N 个数字的平均值 
#!/usr/bin/env python3
N = 10
sum = 0
count = 0
print("please input 10 numbers:")
while count < N:
    number = float(input())
    sum = sum + number
    count = count + 1
average = sum / N
print("N = {}, Sum = {}".format(N, sum))
print("Average = {:.2f}".format(average))

温度转换华氏度到摄氏度
#!/usr/bin/env python3
fahrenheit = 0
print("Fahrenheit Celsius")
while fahrenheit <= 250:
    celsius = (fahrenheit - 32) / 1.8 # 转换为摄氏度
    print("{:5d} {:7.2f}".format(fahrenheit , celsius))
			#{:5d} 的意思是替换为 5 个字符宽度的整数， {:7.2f}的意思是替换为为 7 个字符宽度的保留两位的小数，
			#小数点也算一个宽度，宽度不足则使用空格填充。
    fahrenheit = fahrenheit + 25
		
单行定义多个变量或赋值 		
a , b = 45 , 50
b , a = a , b	#交换两数的数值
data = ("shiyanlou", "China", "Python")	#元组封装
name, country, language = data	#元组拆分
>>> name
'shiyanlou'
>>> country
'China'
>>> language
'Python'

#实验三
运算符
	#进行除法运算时若是除不尽，结果将会是小数，使用 // 运算符（整除），它将返回商的整数部分。
	
计算月数和天数
#!/usr/bin/env python3
days = int(input("Enter days: "))
print("Months = {} Days = {}".format(*divmod(days, 30)))
	#divmod(num1, num2) 返回一个元组，这个元组包含两个值，第一个是 num1 和 num2 相整除得到的值，第二个是 num1 和 num2 求余得到的值。
	#* 运算符拆封这个元组，得到这两个值。

逻辑运算符
	#逻辑运算符 and 和 or 也称作短路运算符：它们的参数从左向右解析，一旦结果可以确定就停止。
	#例如，如果 A 和 C 为真而 B 为假，A and B and C 不会解析 C 。
	#作用于一个普通的非逻辑值时，短路运算符的返回值通常是能够最先确定结果的那个操作数。
	#关系运算可以通过逻辑运算符 and 和 or 组合，比较的结果可以用 not 来取反意。
	#逻辑运算符的优先级又低于关系运算符，在它们之中，not 具有最高的优先级，or 优先级最低，所以 A and not B or C 等于 (A and (notB)) or C。
	>>> 5 and 4  
	4
	>>> 0 and 4   
	0
	>>> False or 3 or 0
	3
	>>> 2 > 1 and not 3 > 5 or 4
	True
	
类型转换函数
	float(string) 	字符串 -> 浮点值
	int(string) 	字符串 -> 整数值
	str(integer) 	整数值 -> 字符串
	str(float) 	浮点值 -> 字符串

计算数列 1/x+1/(x+1)+1/(x+2)+ ... +1/n，我们设 x = 1，n = 10
#!/usr/bin/env python3
sum = 0
for i in range(1, 11):
    sum += 1.0 / i
    print("{:2d} {:6.4f}".format(i , sum))

求解一元二次方程
#!/usr/bin/env python3
import math
a = int(input("Enter value of a: "))
b = int(input("Enter value of b: "))
c = int(input("Enter value of c: "))
d = b * b - 4 * a * c
if d < 0:
    print("ROOTS are imaginary")
else:
    root1 = (-b + math.sqrt(d)) / (2 * a)
    root2 = (-b - math.sqrt(d)) / (2 * a)
    print("Root 1 = ", root1)
    print("Root 2 = ", root2)

salesmansalary.py
计算一位数码相机销售人员的工资。他的基本工资是 1500，每售出一台相机他可以得到 200 并且获得 2% 的抽成。程序要求输入相机数量及单价。
#!/usr/bin/env python3
basic_salary = 1500
bonus_rate = 200
commission_rate = 0.02
numberofcamera = int(input("Enter the number of inputs sold: "))
price = float(input("Enter the price of camera: "))
bonus = (bonus_rate * numberofcamera)
commission = (commission_rate * price * numberofcamera)
print("Bonus        = {:6.2f}".format(bonus))
print("Commission   = {:6.2f}".format(commission))
print("Gross salary = {:6.2f}".format(basic_salary + bonus + commission))

#挑战：圆的面积
CircleArea.py
计算半径为 2 的圆的面积并打印输出。
#!/usr/bin/env python3
import math
r = 2
s = r * r * math.pi
print("The circle area = {:.10f}".format(s))

#第一部分完结#


	

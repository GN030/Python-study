#第七章字符串
字符串可用‘’和""来表示
关于转义字符的介绍：https://blog.csdn.net/weixin_35385983/article/details/99757217
分几行输入字符串，并且希望行尾的换行符自动包含到字符串当中，可以使用三对引号："""...""" 或 '''...''' 。
split() 方法语法：str.split(str="", num=string.count(str)).
参数
    str -- 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。
    num -- 分割次数。默认为 -1, 即分隔所有。
title() 方法语法：str.title()返回字符串的标题版本，即单词首字母大写其余字母小写。
upper() 方法语句：str.upper()返回字符串全部大写的版本。
lower() 方法语句：str.lower()返回字符串的全部小写版本。
swapcase() 方法语句：str.swapcase()返回字符串大小写交换后的版本。
isalnum() 方法语句：str.isalnum()检查所有字符是否只有字母和数字，返回 True与False。
isalpha() 方法语句：str.isalpha()检查字符串之中是否只有字母，返回 True与False。
join() 方法语句：str.join() 使用指定字符连接多个字符串，它需要一个包含字符串元素的列表作为输入然后连接列表内的字符串元素。
>>> "-".join("GNU/Linux is great".split())
'GNU/Linux-is-great'	#我们基于空格 " " 分割字符串 "GNU/Linux is great"，然后用 "-" 连接它们。
strip(chars) 方法语法：str.strip()用来剥离字符串首尾中指定的字符，它允许有一个字符串参数，不指定参数则默认剥离掉首尾的空格和换行符
lstrip(chars) 方法语法：只对字符串左剥离。
rstrip(chars) 方法语法：只对字符串右剥离。
>>> s = "www.foss.in"
>>> s.lstrip("cwsd.") #删除在字符串左边出现的'c','w','s','d','.'字符
'foss.in'
>>> s.rstrip("cnwdi.") #删除在字符串右边出现的'c','n','w','d','i','.'字符
'www.foss'
find() 方法语法：str.find(str1)能帮助你找到第一个匹配的子字符串，没有找到则返回 -1。

palindrome.py
我们检查用户输入的字符串是否是回文，并输出结果。
#!/usr/bin/env python3
s = input("Please enter a string: ")
z = s[::-1]  #把输入的字符串s 进行倒序处理形成新的字符串z;[]为列表，[起始位置：结束位置：步长]，其中步长可以取负数，代表从最后一个元素开始切片。
if s == z:
    print("The string is a palindrome")
else:
    print("The string is not a palindrome")

格式化操作符（%）。
    %s 字符串（用 str() 函数进行字符串转换）
    %r 字符串（用 repr() 函数进行字符串转换）
    %d 十进制整数
    %f 浮点数
    %% 字符 %
		
countwords.py		
对用户输入的一行文本进行单词计数
#!/usr/bin/env python3
s = input("Enter a line: ")
print("The number of words in the line are %d" % (len(s.split(" "))))	#拆分成单词，并计数。

#第八章函数
testpalindrome.py
编写一个函数来检查给出的字符串是否为回文，然后返回 True 或者 False。
#!/usr/bin/env python3
def palindrome(s):
    return s == s[::-1]
if __name__ == '__main__':	
    s = input("Enter a string: ")
    if palindrome(s):
        print("Yay a palindrome")
    else:
        print("Oh no, not a palindrome")
#一个python文件通常有两种使用方法，第一是作为脚本直接执行，第二是 import 到其他的 python 脚本中被调用（模块重用）执行。
因此 if __name__ == 'main': 的作用就是控制这两种情况执行代码的过程，在 if __name__ == 'main': 下的代码只有在第一种情况下（即文件作为脚本直接执行）
才会被执行，而 import 到其他脚本中是不会被执行的。当该模块被直接执行的时候，__name__ 等于文件名（包含后缀 .py ）；
如果该模块 import 到其他模块中，则该模块的 __name__ 等于模块名称（不包含后缀.py）。
而 “__main__” 始终指当前执行模块的名称（包含后缀.py）。进而当模块被直接执行时，__name__ == 'main' 结果为真。
原文链接：https://blog.csdn.net/heqiang525/article/details/89879056

局域与全局变量：
在函数内部使用global a，通过关键字 global 来告诉 a 的定义是全局的，因此在函数内部更改了 a 的值，函数外 a 的值也实际上更改了。

函数的参数变量可以有默认值，也就是说如果我们在调用函数时对指定的参数变量没有给出任何值则会赋其默认值。
>>> def test(a , b=-99):
第一个：具有默认值的参数后面不能再有普通参数，比如 f(a,b=90,c) 就是错误的。
第二个：默认值只被赋值一次，如果默认值是任何可变对象时会有所不同，比如列表、字典或大多数类的实例。
例如，下面的函数在后续调用过程中会累积（前面）传给它的参数:
>>> def f(a, data=[]):
...     data.append(a)
...     return data
...
>>> print(f(1))
[1]
>>> print(f(2))
[1, 2]
>>> print(f(3))
[1, 2, 3]
要避免这个问题，你可以这样做：
>>> def f(a, data=None):
...     if data is None:
...         data = []
...     data.append(a)
...     return data
...
>>> print(f(1))
[1]
>>> print(f(2))
[2]

函数可以通过关键字参数的形式来调用，形如 keyword = value。如下：
>>> def func(a, b=5, c=10):
...     print('a is', a, 'and b is', b, 'and c is', c)
...
>>> func(12, 24)
a is 12 and b is 24 and c is 10
>>> func(12, c = 24)
a is 12 and b is 5 and c is 24
>>> func(b = 12, c = 24, a = -1)
a is -1 and b is 12 and c is 24

我们也能将函数的参数标记为只允许使用关键字参数。用户调用函数时将只能对每一个参数使用相应的关键字参数。
>>> def hello(*, name='User'):
...     print("Hello", name)
...
>>> hello('shiyanlou')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: hello() takes 0 positional arguments but 1 was given
>>> hello(name='shiyanlou')
Hello shiyanlou

#!/usr/bin/env python3
import math

文档字符串是一个重要工具，用于解释文档程序，帮助你的程序文档更加简单易懂。
我们可以在函数体的第一行使用一对三个单引号 ''' 或者一对三个双引号 """ 来定义文档字符串。
你可以使用 __doc__（注意双下划线）调用函数中的文档字符串属性。
def longest_side(a, b):
    """
    Function to find the length of the longest side of a right triangle.

    :arg a: Side a of the triangle
    :arg b: Side b of the triangle

    :return: Length of the longest side c as float
    """
    return math.sqrt(a*a + b*b)

if __name__ == '__main__':
    print(longest_side.__doc__)	#调用函数中的文档字符串属性。
    print(longest_side(4,5))

高阶函数（_Higher-order function_）或仿函数（_functor_）是可以接受函数作为参数的函数：

    使用一个或多个函数作为参数
    返回另一个函数作为输出
Python 里的任何函数都可以作为高阶函数
# 创建一个函数，将参数列表中每个元素都变成全大写
>>> def high(l):
...     return [i.upper() for i in l]
...
# 创建高阶函数，接受一个函数和一个列表作为参数
>>> def test(h, l):
...     return h(l)
...
>>> l = ['python', 'Linux', 'Git']
# 运行高阶函数，返回预期的结果
>>> test(high, l)
['PYTHON', 'LINUX', 'GIT']

map 函数

map 是一个在 Python 里非常有用的高阶函数。它接受一个函数和一个序列（迭代器）作为输入，
然后对序列（迭代器）的每一个值应用这个函数，返回一个序列（迭代器），其包含应用函数后的结果。
>>> lst = [1, 2, 3, 4, 5]
>>> def square(num):
...     "返回所给数字的平方."
...     return num * num
...
>>> print(list(map(square, lst)))
[1, 4, 9, 16, 25]

#第九章 文件打开
我们使用 open() 函数打开文件。它需要两个参数，第一个参数是文件路径或文件名，第二个是文件的打开模式。模式通常是下面这样的：

    "r"，以只读模式打开，你只能读取文件但不能编辑/删除文件的任何内容
    "w"，以写入模式打开，如果文件存在将会删除里面的所有内容，然后打开这个文件进行写入
    "a"，以追加模式打开，写入到文件中的任何数据将自动添加到末尾

默认的模式为只读模式，也就是说如果你不提供任何模式，open() 函数将会以只读模式打开文件。
>>> fobj = open("sample.txt")
>>> fobj
<_io.TextIOWrapper name='sample.txt' mode='r' encoding='UTF-8'>
>>> fobj.close()	#打开文件后我们应该总是关闭文件。我们使用方法 close() 完成这个操作。

fobj.read()	#使用 read() 方法一次性读取整个文件。如果你再一次调用 read()，它会返回空字符串因为它已经读取完整个文件。
read(size) 有一个可选的参数 size，用于指定字符串长度。如果没有指定 size  或者指定为负数，就会读取并返回整个文件。
fobj.readline()	#readline() 能帮助你每次读取文件的一行。
fobj.readlines()	#使用 readlines() 方法读取所有行到一个列表中。
for x in fobj	#使用 readlines() 方法读取所有行到一个列表中。
print(x, end = '')

打印文件内容：
#!/usr/bin/env python3
name = input("Enter the file name: ")
fobj = open(name)
print(fobj.read())
fobj.close()	


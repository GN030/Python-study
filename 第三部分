#第七章字符串
字符串可用‘’和""来表示
关于转义字符的介绍：https://blog.csdn.net/weixin_35385983/article/details/99757217
分几行输入字符串，并且希望行尾的换行符自动包含到字符串当中，可以使用三对引号："""...""" 或 '''...''' 。
split() 方法语法：str.split(str="", num=string.count(str)).
参数
    str -- 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。
    num -- 分割次数。默认为 -1, 即分隔所有。
title() 方法语法：str.title()返回字符串的标题版本，即单词首字母大写其余字母小写。
upper() 方法语句：str.upper()返回字符串全部大写的版本。
lower() 方法语句：str.lower()返回字符串的全部小写版本。
swapcase() 方法语句：str.swapcase()返回字符串大小写交换后的版本。
isalnum() 方法语句：str.isalnum()检查所有字符是否只有字母和数字，返回 True与False。
isalpha() 方法语句：str.isalpha()检查字符串之中是否只有字母，返回 True与False。
join() 方法语句：str.join() 使用指定字符连接多个字符串，它需要一个包含字符串元素的列表作为输入然后连接列表内的字符串元素。
>>> "-".join("GNU/Linux is great".split())
'GNU/Linux-is-great'	#我们基于空格 " " 分割字符串 "GNU/Linux is great"，然后用 "-" 连接它们。
strip(chars) 方法语法：str.strip()用来剥离字符串首尾中指定的字符，它允许有一个字符串参数，不指定参数则默认剥离掉首尾的空格和换行符
lstrip(chars) 方法语法：只对字符串左剥离。
rstrip(chars) 方法语法：只对字符串右剥离。
>>> s = "www.foss.in"
>>> s.lstrip("cwsd.") #删除在字符串左边出现的'c','w','s','d','.'字符
'foss.in'
>>> s.rstrip("cnwdi.") #删除在字符串右边出现的'c','n','w','d','i','.'字符
'www.foss'
find() 方法语法：str.find(str1)能帮助你找到第一个匹配的子字符串，没有找到则返回 -1。

palindrome.py
我们检查用户输入的字符串是否是回文，并输出结果。
#!/usr/bin/env python3
s = input("Please enter a string: ")
z = s[::-1]  #把输入的字符串s 进行倒序处理形成新的字符串z;[]为列表，[起始位置：结束位置：步长]，其中步长可以取负数，代表从最后一个元素开始切片。
if s == z:
    print("The string is a palindrome")
else:
    print("The string is not a palindrome")

格式化操作符（%）。
    %s 字符串（用 str() 函数进行字符串转换）
    %r 字符串（用 repr() 函数进行字符串转换）
    %d 十进制整数
    %f 浮点数
    %% 字符 %
		
countwords.py		
对用户输入的一行文本进行单词计数
#!/usr/bin/env python3
s = input("Enter a line: ")
print("The number of words in the line are %d" % (len(s.split(" "))))	#拆分成单词，并计数。

#第八章函数
testpalindrome.py
编写一个函数来检查给出的字符串是否为回文，然后返回 True 或者 False。
#!/usr/bin/env python3
def palindrome(s):
    return s == s[::-1]
if __name__ == '__main__':	
    s = input("Enter a string: ")
    if palindrome(s):
        print("Yay a palindrome")
    else:
        print("Oh no, not a palindrome")
#一个python文件通常有两种使用方法，第一是作为脚本直接执行，第二是 import 到其他的 python 脚本中被调用（模块重用）执行。
因此 if __name__ == 'main': 的作用就是控制这两种情况执行代码的过程，在 if __name__ == 'main': 下的代码只有在第一种情况下（即文件作为脚本直接执行）
才会被执行，而 import 到其他脚本中是不会被执行的。当该模块被直接执行的时候，__name__ 等于文件名（包含后缀 .py ）；
如果该模块 import 到其他模块中，则该模块的 __name__ 等于模块名称（不包含后缀.py）。
而 “__main__” 始终指当前执行模块的名称（包含后缀.py）。进而当模块被直接执行时，__name__ == 'main' 结果为真。
原文链接：https://blog.csdn.net/heqiang525/article/details/89879056


